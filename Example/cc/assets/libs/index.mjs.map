{"version":3,"sources":["../../src/type.ts","../../src/DataTower.ts","../../src/constant.ts","../../src/utils.ts","../../src/Web/index.ts","../../src/CocosCreator/Android.ts","../../src/CocosCreator/IOS.ts","../../src/CocosCreator/index.ts"],"names":["LogLevel"],"mappings":"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","sourcesContent":["export interface Context {\n  /* TODO: Context */\n}\n\nexport enum LogLevel {\n  VERBOSE = 1,\n  ASSERT = 2,\n  DEBUG = 3,\n  INFO = 4,\n  WARN = 5,\n  ERROR = 6,\n}\n\nexport interface Config {\n  context: Context; // Context 上下文\n  appId: string; // 项目唯一标识，创建项目后 DT 后台自动分配，请在【项目设置-项目详情】中获取\n  serverUrl: string; // 数据上报地址，创建项目后 DT 后台自动分配，请在【项目设置-项目详情】中获取\n  channel: string; // 渠道，打多渠道包时需要用到，可使用 SDK 内部提供的实现， 默认为“”\n  isDebug: boolean; // 是否打开调试，调试模式下将打印 log， 默认为 false，log 标签为 DataTower\n  logLevel: LogLevel; // log 的级别，默认为 VERBOSE，仅在 isDebug = true 有效\n  manualEnableUpload: boolean; // 是否由接入方手动启动上报\n  commonProperties: Record<string, any>;\n}\n\n// TODO: iife\n// declare global {\n//   interface Window {\n//     DataTower: DataTower;\n//   }\n// }\n// declare var DataTower: DataTower;\n","import type { Config } from './type';\n\nexport class DataTower {\n  static instance: Omit<typeof DataTower, 'instance' | 'prototype'>;\n\n  static init(config: Config): void {\n    return DataTower.instance.init(config);\n  }\n  static enableTrack(): void {\n    return DataTower.instance.enableTrack();\n  }\n  static track(eventName: string, properties?: Record<string, any>): void {\n    return DataTower.instance.track(eventName, properties);\n  }\n  static userSet(properties: Record<string, any>): void {\n    return DataTower.instance.userSet(properties);\n  }\n  static userSetOnce(properties: Record<string, any>): void {\n    return DataTower.instance.userSetOnce(properties);\n  }\n  static userAdd(properties: Record<string, any>): void {\n    return DataTower.instance.userAdd(properties);\n  }\n  static userUnset(...properties: string[]): void {\n    return DataTower.instance.userUnset(...properties);\n  }\n  static userDel(): void {\n    return DataTower.instance.userDel();\n  }\n  static userAppend(...properties: string[]): void {\n    return DataTower.instance.userAppend(...properties);\n  }\n  static userUniqAppend(...properties: string[]): void {\n    return DataTower.instance.userUniqAppend(...properties);\n  }\n  static getDataTowerId(callback: (id: string) => void): void;\n  static getDataTowerId(): Promise<string>;\n  static getDataTowerId(callback?: (id: string) => void): void | Promise<string> {\n    return DataTower.instance.getDataTowerId(callback!);\n  }\n  static setAccountId(id: string): void {\n    return DataTower.instance.setAccountId(id);\n  }\n  static setDistinctId(id: string): void {\n    return DataTower.instance.setDistinctId(id);\n  }\n  static getDistinctId(): string | null | void {\n    return DataTower.instance.getDistinctId();\n  }\n  static setFirebaseAppInstanceId(id: string): void {\n    return DataTower.instance.setFirebaseAppInstanceId(id);\n  }\n  static setAppsFlyerId(id: string): void {\n    return DataTower.instance.setAppsFlyerId(id);\n  }\n  static setKochavaId(id: string): void {\n    return DataTower.instance.setKochavaId(id);\n  }\n  static setAdjustId(id: string): void {\n    return DataTower.instance.setAdjustId(id);\n  }\n  static setCommonProperties(properties: Record<string, any>): void {\n    return DataTower.instance.setCommonProperties(properties);\n  }\n  static clearCommonProperties(): void {\n    return DataTower.instance.clearCommonProperties();\n  }\n  static setStaticCommonProperties(properties: Record<string, any>): void {\n    return DataTower.instance.setStaticCommonProperties(properties);\n  }\n  static clearStaticCommonProperties(): void {\n    return DataTower.instance.clearStaticCommonProperties();\n  }\n}\n","import type { Config } from './type';\n\nexport const DefaultConfig: Config = {\n  context: {},\n  appId: '',\n  serverUrl: '',\n  channel: '',\n  isDebug: false,\n  logLevel: 1,\n  manualEnableUpload: false,\n  commonProperties: {},\n};\n\nexport const AndroidClass = 'ai/datatower/analytics/DT';\nexport const IOSClass = 'DT';\n","const typeMap = {\n  string: 'Ljava/lang/String;',\n  number: 'Ljava/lang/Double;',\n  boolean: 'Ljava/lang/Boolean;',\n  map: 'Ljava/util/Map;',\n  array: 'Ljava/util/List;',\n};\n\n// 生成Android签名\nexport function generateSignature(types: (keyof typeof typeMap)[]): string {\n  return `(${types.map((type) => typeMap[type]).join('')})V`;\n}\n\nexport function logger(...args: any[]) {\n  console.log('[DataTower SDK]:', ...args);\n}\n","import { DataTower } from '../DataTower';\nimport { DefaultConfig } from '../constant';\nimport type { Config } from '../type';\nimport { logger } from '../utils';\nexport * from '../type';\n\nconst CurrentPlatform: any = new Proxy(\n  {},\n  {\n    get(target, key: string) {\n      return (...args: any[]) => {\n        const params = args.map((arg) => (typeof arg === 'function' ? arg.toString() : JSON.stringify(arg))).join(', ');\n        console.log(`${key}(${params})`);\n      };\n    },\n  },\n);\n\n// TODO: 待实现\nclass Web extends DataTower {\n  constructor(config?: Config) {\n    super();\n    if (config) this.init(config);\n  }\n  init(config: Config) {\n    config = Object.assign({}, DefaultConfig, config);\n    if (config.isDebug) return logger('Web', 'init', config);\n    CurrentPlatform.init(config);\n  }\n  track(eventName: string, properties?: Record<string, any>): void {\n    CurrentPlatform.track(eventName, properties);\n  }\n  enableTrack(): void {\n    CurrentPlatform.enableTrack();\n  }\n  userSet(properties: Record<string, any>): void {\n    CurrentPlatform.userSet(properties);\n  }\n  userSetOnce(properties: Record<string, any>): void {\n    CurrentPlatform.userSetOnce(properties);\n  }\n  userAdd(properties: Record<string, any>): void {\n    CurrentPlatform.userAdd(properties);\n  }\n  userUnset(...properties: string[]): void {\n    CurrentPlatform.userUnset(...properties);\n  }\n  userDel(): void {\n    CurrentPlatform.userDel();\n  }\n  userAppend(...properties: string[]): void {\n    CurrentPlatform.userAppend(...properties);\n  }\n  userUniqAppend(...properties: string[]): void {\n    CurrentPlatform.userUniqAppend(...properties);\n  }\n  getDataTowerId(callback: (id: string) => void): void;\n  getDataTowerId(): Promise<string>;\n  getDataTowerId(callback?: (id: string) => void): void | Promise<string> {\n    CurrentPlatform.getDataTowerId(callback);\n    if (!callback) return Promise.resolve('data tower id');\n    callback('data tower id');\n  }\n  setAccountId(id: string): void {\n    CurrentPlatform.setAccountId(id);\n  }\n  setDistinctId(id: string): void {\n    CurrentPlatform.setDistinctId(id);\n  }\n  getDistinctId(): string | void | null {\n    return CurrentPlatform.getDistinctId();\n  }\n  setFirebaseAppInstanceId(id: string): void {\n    CurrentPlatform.setFirebaseAppInstanceId(id);\n  }\n  setAppsFlyerId(id: string): void {\n    CurrentPlatform.setAppsFlyerId(id);\n  }\n  setKochavaId(id: string): void {\n    CurrentPlatform.setKochavaId(id);\n  }\n  setAdjustId(id: string): void {\n    CurrentPlatform.setAdjustId(id);\n  }\n  setCommonProperties(properties: Record<string, any>): void {\n    CurrentPlatform.setCommonProperties(properties);\n  }\n  clearCommonProperties(): void {\n    CurrentPlatform.clearCommonProperties();\n  }\n  setStaticCommonProperties(properties: Record<string, any>): void {\n    CurrentPlatform.setStaticCommonProperties(properties);\n  }\n  clearStaticCommonProperties(): void {\n    CurrentPlatform.clearStaticCommonProperties();\n  }\n}\n\nDataTower.instance = new Web();\nexport { Web as DataTower };\nexport default Web;\n","import { DataTower } from '../DataTower';\nimport { AndroidClass, DefaultConfig } from '../constant';\nimport type { Config } from '../type';\nimport { generateSignature, logger } from '../utils';\n\n/**\n * cocos creator Android bridge\n */\nclass Android extends DataTower {\n  constructor(config?: Config) {\n    super();\n    if (config) this.init(config);\n  }\n\n  init(config: Config) {\n    config = Object.assign({}, DefaultConfig, config);\n    if (config.isDebug) return logger('Android', 'init', config);\n    jsb.reflection.callStaticMethod(AndroidClass, 'initSDK', generateSignature(['map']), config);\n  }\n  track(eventName: string, properties?: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'track', generateSignature(['string', 'map']), eventName, properties);\n  }\n  enableTrack(): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'enableTrack');\n  }\n  userSet(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userSet', generateSignature(['map']), properties);\n  }\n  userSetOnce(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userSetOnce', generateSignature(['map']), properties);\n  }\n  userAdd(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userAdd', generateSignature(['map']), properties);\n  }\n  userUnset(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userUnset', generateSignature(['array']), properties);\n  }\n  userDel(): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userDel');\n  }\n  userAppend(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userAppend', generateSignature(['array']), properties);\n  }\n  userUniqAppend(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'userUniqAppend', generateSignature(['array']), properties);\n  }\n  getDataTowerId(callback: (id: string) => void): void;\n  getDataTowerId(): Promise<string>;\n  getDataTowerId(callback?: (id: string) => void): void | Promise<string> {\n    if (!callback) return new Promise((resolve) => this.getDataTowerId(resolve));\n    jsb.reflection.callStaticMethod(AndroidClass, 'getDataTowerId', generateSignature(['string']), callback);\n  }\n  setAccountId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setAccountId', generateSignature(['string']), id);\n  }\n  setDistinctId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setDistinctId', generateSignature(['string']), id);\n  }\n  getDistinctId(): string | void | null {\n    jsb.reflection.callStaticMethod(AndroidClass, 'getDistinctId');\n  }\n  setFirebaseAppInstanceId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setFirebaseAppInstanceId', generateSignature(['string']), id);\n  }\n  setAppsFlyerId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setAppsFlyerId', generateSignature(['string']), id);\n  }\n  setKochavaId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setKochavaId', generateSignature(['string']), id);\n  }\n  setAdjustId(id: string): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setAdjustId', generateSignature(['string']), id);\n  }\n  setCommonProperties(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setCommonProperties', generateSignature(['map']), properties);\n  }\n  clearCommonProperties(): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'clearCommonProperties');\n  }\n  setStaticCommonProperties(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'setStaticCommonProperties', generateSignature(['map']), properties);\n  }\n  clearStaticCommonProperties(): void {\n    jsb.reflection.callStaticMethod(AndroidClass, 'clearStaticCommonProperties');\n  }\n}\n\nDataTower.instance = new Android();\nexport { Android as DataTower };\nexport default Android;\n","import { DataTower } from '../DataTower';\nimport { DefaultConfig, IOSClass } from '../constant';\nimport type { Config } from '../type';\nimport { logger } from '../utils';\n\n/**\n * cocos creator IOS bridge\n */\nclass IOS extends DataTower {\n  constructor(config?: Config) {\n    super();\n    if (config) this.init(config);\n  }\n  init(config: Config) {\n    config = Object.assign({}, DefaultConfig, config);\n    if (config.isDebug) return logger('IOS', 'init', config);\n    jsb.reflection.callStaticMethod(IOSClass, 'initSDK:', config);\n  }\n  track(eventName: string, properties?: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'track:properties:', eventName, properties);\n  }\n  enableTrack(): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'enableTrack');\n  }\n  userSet(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userSet:', properties);\n  }\n  userSetOnce(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userSetOnce:', properties);\n  }\n  userAdd(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userAdd:', properties);\n  }\n  userUnset(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userUnset:', properties);\n  }\n  userDel(): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userDel');\n  }\n  userAppend(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userAppend:', properties);\n  }\n  userUniqAppend(...properties: string[]): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'userUniqAppend:', properties);\n  }\n  getDataTowerId(callback: (id: string) => void): void;\n  getDataTowerId(): Promise<string>;\n  getDataTowerId(callback?: (id: string) => void): void | Promise<string> {\n    if (!callback) return new Promise((resolve) => this.getDataTowerId(resolve));\n    jsb.reflection.callStaticMethod(IOSClass, 'getDataTowerId:', callback);\n  }\n  setAccountId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setAccountId:', id);\n  }\n  setDistinctId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setDistinctId:', id);\n  }\n  getDistinctId(): string | void | null {\n    jsb.reflection.callStaticMethod(IOSClass, 'getDistinctId');\n  }\n  setFirebaseAppInstanceId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setFirebaseAppInstanceId:', id);\n  }\n  setAppsFlyerId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setAppsFlyerId:', id);\n  }\n  setKochavaId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setKochavaId:', id);\n  }\n  setAdjustId(id: string): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setAdjustId:', id);\n  }\n  setCommonProperties(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setCommonProperties:', properties);\n  }\n  clearCommonProperties(): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'clearCommonProperties');\n  }\n  setStaticCommonProperties(properties: Record<string, any>): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'setStaticCommonProperties:', properties);\n  }\n  clearStaticCommonProperties(): void {\n    jsb.reflection.callStaticMethod(IOSClass, 'clearStaticCommonProperties');\n  }\n}\n\nDataTower.instance = new IOS();\nexport { IOS as DataTower };\nexport default IOS;\n","export * from '../type';\nimport { DataTower } from '../DataTower';\n// TODO: 在编译期区分平台\n// #if NATIVE_ANDROID\n// export * from './Android.js';\n// #elif NATIVE_IOS\n// export * from './IOS.js';\n// #else\n\n// 在运行时区分平台\nimport Web from '../Web/index';\nimport Android from './Android';\nimport IOS from './IOS';\n\n/**\n * cocos creator platform API\n * includes android/ios, quick app and mini game/program\n */\nconst CocosCreator = (<const>[\n  [cc.sys.platform == cc.sys.Platform.ANDROID, Android],\n  [cc.sys.platform == cc.sys.Platform.IOS, IOS],\n  [true, Web],\n]).find((item) => item[0])![1];\n\nDataTower.instance = new CocosCreator();\nexport { CocosCreator as DataTower };\nexport default CocosCreator;\n// #endif\n"]}